Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodolgy:
    No powerpoint
    100% hands on

Repository:
    https://github.com/tkmagesh/IBM-Go-Apr-2022

About You:
    Name
    Total Experience
    Primary Skillset
    Experinece in Go (if any)

Why Golang?

~       - C
~1980   - C++
1995    - Java
        - Python
1996    - Ruby
1998    - .NET (C#)

2015    - Golang

Golang
    1. Simplicity
        25 keywords
        - No access modifiers (No public, private, protected , internal etc)
        - No Classes (Only structs)
        - No Inheritance (Only composition)
        - No Exceptions (Only errors)
        - No reference types (Only value types)
        - No pointer arithmetic 
        - No Implicit type conversion

        Paradox Of Choice (Barry Schwartz)

    2. Extremely light weight
        Compiles to native code
        Performance is equivalent to C++

    3. Built FOR concurrency
        concurrency = the ability to have more than one execution path
        OS Threads are costly
            1 OS thread = 2 MB of memory
        1000s of goroutines can be executed using 1 OS thread
        A concurrent operation in golang = a goroutine
        Language has features to help with concurrency
            go keyword, channel (data type), select, range, channel operation ( <- )
            APIs in the sync package

Software Requirements
    1. Go compiler - https://go.dev/dl/
    2. Visual Studio Code - https://code.visualstudio.com/

To run a go program
    go run <filename.go>

To create a build   
    go build <filename.go>
    go build -o <build_filename> <filename.go>

To create a build for other platforms
for ex: windows
    
    GOOS=windows GOARCH=386 go build <filename.go>
    GOOS=windows GOARCH=386 go build -o <build_filename> <filename.go>

    The list of other platform configurations can be found at :
        https://go.dev/doc/install/source#environment

    To change the default environment variables
        go env -w GOOS=linux GOARCH=amd64


Data types in Golang
    string
    bool

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] + imaginary [float32])
    complex128 (real [float64] + imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32)(unicode code point)


Assignment:01
    Write a program that will print all the prime numbers between 3 to 100

Assignment:02 (Console Calculator)    
    Display the following menu 
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit
    If the user choice is 1 - 4, 
        accept 2 numbers 
        perform the respective operation
        print the result
        display the menu again
    if the user choice is 5
        exit from the application
    If the user enters any other choice 
        display "Invalid choice" 
        display the menu again.

Functions
    1. variadic functions
    2. anonymous functions
    3. higher order functions (function that can be treated like data)
        a. assign functions to variables
        b. pass functions as arguments to other functions
        c. return functions as return values

Assignment:03
    Refactor the solution for Assignment:02 in such a way that the solution is composed of functions with each of them having ONLY ONE responsibility

Collections
    Array
        FIXED size collection of data of the same type

    Slice
        Variable size collection of data of the same type
        
    Map
        collection of key/value pairs

Assignment:04
    Refactor the solution for Assignment:01 with a function "generatePrimes" that returns the list of prime numbers between given 'start' and 'end'

Modularity
    Modules
    Packages

    Modules were introduced in Go 1.13

    Before Go 1.13
        GOPATH - Path to the Go source code
            bin
            pkg
            src
                github.com
                    tkmagesh
                        my-app

                            pkg1
                                - file1.go
                                - file2.go
                            pkg2
                                - file1.go
                                - file2.go

                        import "github.com/tkmagesh/my-app/pkg1"
                        import "github.com/tkmagesh/my-app/pkg2"

        module
            application boundary
            go.mod 
                module name (it is advisable to use the repository path as the module name)
                go version
                dependencies

            to create a module file
                go mod init <module_name>
                ex: go mod init modularity-demo

3rd party packages
    To install
        go get github.com/fatih/color
    Note:
        By default, the 3rd party packages are downloaded in the GOPATH/pkg folder

    To update the dependencies
        go mod download
    
    To update the go.mod file based on the usage of packages
        go mod tidy

    To localize the dependencies source code of the application
        go mod vendor

    To verify if the module files are changed in the module cache (NOT in the vendor folder)
        go mod verify

    To print the dependency graph
        go mod graph

    To know the usage of a package
        go mod why <package_name>

Structs
    like class

    Assignment:06
        Create a 'Product' struct with the following fields
            Id
            Name
            Cost
            Units
            Category (string)

        Write the following functions
            Format(/*...*/) 
                => return a string with a formatted representation of the given product
                    ex: Id=100, Name=Pen, Cost=10, Units=10, Category=Stationary
            
            ApplyDiscount(/*...*/)
                => modify the cost of the given product by applying the given discount
                    Before applying discount, if product cost = 10
                    after applying 10% discount, the product cost should be 9

Methods
    Methods cannot be defined on "non-local" types
    Assignment:08
        Take the solution for Assignment:07 and convert the "Format" and "ApplyDiscount" functions to methods of Product

        Create a "Format" method (override) for the "PerishableProduct" which will print all the fields of the product + Expiry


Maintainability
    Fixing Bugs
    Adding New Features
    Removing dead features

    Changing the existing code
        Single Responsibility Principle
        Open-Closed Principle
            Open for extension and closed for modification

Assignment:09
    Given the products collection, 

        type Product struct {
            Id       int
            Name     string
            Cost     float32
            Units    int
            Category string
        }

        products := []Product{
            Product{105, "Pen", 5, 50, "Stationary"},
            Product{107, "Pencil", 2, 100, "Stationary"},
            Product{103, "Marker", 50, 20, "Utencil"},
            Product{102, "Stove", 5000, 5, "Utencil"},
            Product{101, "Kettle", 2500, 10, "Utencil"},
            Product{104, "Scribble Pad", 20, 20, "Stationary"},
        }

    write the apis for the following APIs

        IndexOf => return the index of the given product
            ex: IndexOf(product) => returns the index of the given product

        Includes => return true if the given product is present in the collection else return false
            ex: Includes(product) => returns true if the given product is present in the collection

        Filter => return a new collection of products that satisfy the given condition
            use cases:
                1. filter all costly products (cost > 1000)
                2. filter all stationary products (category = "Stationary")
                3. filter all costly stationary products

        Any => return true if any of the product in the collections satifies the given criteria
            use cases:
                1. are there any costly product (cost > 1000)?
                2. are there any stationary product (category = "Stationary")?
                3. are there any costly stationary product?

        All => return true if all the products in the collections satifies the given criteria
            use cases:
                1. are all the products costly products (cost > 1000)?
                2. are all the products stationary products (category = "Stationary")?
                3. are all the products costly stationary products?
        
        Sort => Sort the products collection using by any attribute
            use cases:
                1. sort the products collection by cost
                2. sort the products collection by name
                3. sort the products collection by units
                4. sort the products collection by cost in descending order
                5. sort the products collection by name in descending order
                6. sort the products collection by units in descending order

Concurrency
    NEVER assume the time taken for a goroutine to execute
    NEVER assume the order of execution of goroutines

    Creating a channel
        ch := make(chan int)

    Sending data to a channel
        ch <- 100

    Receive data from a channel
        data := <- ch
        
    Channel Behaviors
        1. A 'receive' operation on a channel is ALWAYS a blocking operation
        2. A 'send' operation can succeed ONLY if a 'receive' operation is ALREADY initiated (CONDITIONS APPLY)
            OR
           A 'send' operation is blocked until a 'receive' operation is initiated (CONDITIONS APPLY)


Assignment:11
    Write a goroutine "genPrimes" that will return the first 10 prime numbers from 3 (one after another with a time delay of 500 milliseconds)
    
    The main function will receive the prime numbers from the goroutine and print them