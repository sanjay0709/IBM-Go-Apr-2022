Magesh Kuppan

Schedule:
    Commence    : 9:30 AM
    Tea Break   : 11:00 AM (20 mins)
    Lunch Break : 1:00 PM (1 Hr)
    Tea Break   : 3:30 PM (20 mins)
    Wind up     : 5:30 PM

Methodolgy:
    No powerpoint
    100% hands on

Repository:
    https://github.com/tkmagesh/IBM-Go-Apr-2022

About You:
    Name
    Total Experience
    Primary Skillset
    Experinece in Go (if any)

Why Golang?

~       - C
~1980   - C++
1995    - Java
        - Python
1996    - Ruby
1998    - .NET (C#)

2015    - Golang

Golang
    1. Simplicity
        25 keywords
        - No access modifiers (No public, private, protected , internal etc)
        - No Classes (Only structs)
        - No Inheritance (Only composition)
        - No Exceptions (Only errors)
        - No reference types (Only value types)
        - No pointer arithmetic 
        - No Implicit type conversion

        Paradox Of Choice (Barry Schwartz)

    2. Extremely light weight
        Compiles to native code
        Performance is equivalent to C++

    3. Built FOR concurrency
        concurrency = the ability to have more than one execution path
        OS Threads are costly
            1 OS thread = 2 MB of memory
        1000s of goroutines can be executed using 1 OS thread
        A concurrent operation in golang = a goroutine
        Language has features to help with concurrency
            go keyword, channel (data type), select, range, channel operation ( <- )

Software Requirements
    1. Go compiler - https://go.dev/dl/
    2. Visual Studio Code - https://code.visualstudio.com/

To run a go program
    go run <filename.go>

To create a build   
    go build <filename.go>
    go build -o <build_filename> <filename.go>

To create a build for other platforms
for ex: windows
    
    GOOS=windows GOARCH=386 go build <filename.go>
    GOOS=windows GOARCH=386 go build -o <build_filename> <filename.go>

    The list of other platform configurations can be found at :
        https://go.dev/doc/install/source#environment

    To change the default environment variables
        go env -w GOOS=linux GOARCH=amd64


Data types in Golang
    string
    bool

    int
    int8
    int16
    int32
    int64

    uint
    uint8
    uint16
    uint32
    uint64

    float32
    float64

    complex64 (real [float32] + imaginary [float32])
    complex128 (real [float64] + imaginary [float64])

    byte (alias for uint8)
    rune (alias for int32)(unicode code point)


Assignment:01
    Write a program that will print all the prime numbers between 3 to 100

Assignment:02 (Console Calculator)    
    Display the following menu 
        1. Add
        2. Subtract
        3. Multiply
        4. Divide
        5. Exit
    If the user choice is 1 - 4, 
        accept 2 numbers 
        perform the respective operation
        print the result
        display the menu again
    if the user choice is 5
        exit from the application
    If the user enters any other choice 
        display "Invalid choice" 
        display the menu again.

Functions
    1. variadic functions
    2. anonymous functions
    3. higher order functions (function that can be treated like data)
        a. assign functions to variables
        b. pass functions as arguments to other functions
        c. return functions as return values

Assignment:03
    Refactor the solution for Assignment:02 in such a way that the solution is composed of functions with each of them having ONLY ONE responsibility

Collections
    Array
        FIXED size collection of data of the same type

    Slice
        Variable size collection of data of the same type
        
    Map
        collection of key/value pairs

Assignment:04
    Refactor the solution for Assignment:01 with a function "generatePrimes" that returns the list of prime numbers between given 'start' and 'end'

Modularity
    Modules
    Packages

    Modules were introduced in Go 1.13

    Before Go 1.13
        GOPATH - Path to the Go source code
            bin
            pkg
            src
                github.com
                    tkmagesh
                        my-app

                            pkg1
                                - file1.go
                                - file2.go
                            pkg2
                                - file1.go
                                - file2.go

                        import "github.com/tkmagesh/my-app/pkg1"
                        import "github.com/tkmagesh/my-app/pkg2"

        module
            application boundary
            go.mod 
                module name (it is advisable to use the repository path as the module name)
                go version
                dependencies

            to create a module file
                go mod init <module_name>
                ex: go mod init modularity-demo

